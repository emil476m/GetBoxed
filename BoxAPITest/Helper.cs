using Dapper;
using Npgsql;
using Newtonsoft.Json;
using NUnit.Framework;

namespace Service;

public class Helper
{
    
    public static readonly Uri Uri;
    public static readonly string ProperlyFormattedConnectionString;
    public static readonly NpgsqlDataSource DataSource;
        
    static Helper()
    {
        string envVarKeyName = "pgconn";
        string rawConnectionString;
        rawConnectionString = Environment.GetEnvironmentVariable(envVarKeyName)!;
        if (rawConnectionString == null)
        {
            throw new Exception($@"Connection string " + envVarKeyName + " is empty");
        }


        try
        {
            Uri = new Uri(rawConnectionString);
            ProperlyFormattedConnectionString = string.Format(
                "Server={0};Database={1};User Id={2};Password={3};Port={4};Pooling=true;",
                Uri.Host,
                Uri.AbsolutePath.Trim('/'),
                Uri.UserInfo.Split(':')[0],
                Uri.UserInfo.Split(':')[1],
                Uri.Port > 0 ? Uri.Port : 5432);
            DataSource =
                new NpgsqlDataSourceBuilder(ProperlyFormattedConnectionString).Build();
            DataSource.OpenConnection().Close();
        }
        catch (Exception e)
        {
            throw new Exception($@"
connection string not found", e);
        }
    }
    
    
    public static void TriggerRebuild()
    {
        using (var conn = DataSource.OpenConnection())
        {
            try
            {
                conn.Execute(RebuildScript);
            }
            catch (Exception e)
            {
                throw new Exception($@"
THERE WAS AN ERROR REBUILDING THE DATABASE.
", e);
            }
        }
    }
    
    public static async Task<bool> IsCorsFullyEnabledAsync(string path)
    {
        using var client = new HttpClient();
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Options, new Uri(path));
            // Add Origin header to simulate CORS request
            request.Headers.Add("Origin", "https://week35-86108.web.app");
            request.Headers.Add("Access-Control-Request-Method", "GET");
            request.Headers.Add("Access-Control-Request-Headers", "X-Requested-With");

            var response = await client.SendAsync(request);

            bool corsEnabled = false;

            if (response.Headers.Contains("Access-Control-Allow-Origin"))
            {
                var accessControlAllowOrigin =
                    response.Headers.GetValues("Access-Control-Allow-Origin").FirstOrDefault();
                corsEnabled = accessControlAllowOrigin == "*" ||
                              accessControlAllowOrigin == "https://week35-86108.web.app";
            }

            var accessControlAllowMethods = response.Headers.GetValues("Access-Control-Allow-Methods").FirstOrDefault();
            var accessControlAllowHeaders = response.Headers.GetValues("Access-Control-Allow-Headers").FirstOrDefault();

            if (corsEnabled && (accessControlAllowMethods != null && accessControlAllowMethods.Contains("GET")) &&
                (accessControlAllowHeaders != null && accessControlAllowHeaders.Contains("X-Requested-With")))
            {
                return true;
            }
        }
        catch (Exception)
        {
            throw new Exception("\nCORS IS NOT ENABLED. PLEASE ENABLE CORS.\n(check last part of the project description)\n");
        }


        return false;
    }
    
    public static string BadResponseBody(string content)
    {
        return $@"
RESPONSE BODY: {content}

EXCEPTION:
";
    }
    
    public static string MyBecause(object actual, object expected)
    {
        string expectedJson = JsonConvert.SerializeObject(expected, Formatting.Indented);
        string actualJson = JsonConvert.SerializeObject(actual, Formatting.Indented);

        return $"because we want these objects to be equivalent:\nExpected:\n{expectedJson}\nActual:\n{actualJson}";
    }
    
    
    
    public static string RebuildScript = @"
DROP SCHEMA IF EXISTS getboxed CASCADE;
CREATE SCHEMA getboxed;
create table if not exists getboxed.box
(
    boxid               integer generated by default as identity,
    name                text,
    size                text,
    description         text,
    price               FLOAT,
    boximgurl           text,
    constraint boxpk
        primary key (boxid)
);

create table if not exists getboxed.customer
(
    customerid           integer generated by default as identity,
    name           text,
    mail           text,
    tlf            text,
    address        text,
    constraint customerpk
        primary key (customerid)

);

create table if not exists getboxed.orderlist
(
    orderid                integer generated by default as identity,
    customerid             INT REFERENCES getboxed.customer(customerid),
    pricesum               FLOAT,
    orderDate DATE NOT NULL DEFAULT CURRENT_DATE,
    constraint orderlistpk
    primary key (orderid)
);

create table if not exists getboxed.boxorder
(
    orderid INT REFERENCES getboxed.orderlist(orderid) ON DELETE CASCADE,
    boxid   INT REFERENCES getboxed.box(boxid),
    boxamount           integer
);
INSERT INTO getboxed.customer VALUES (12, 'Benny Smith', 'benny@gmail.com', '+45 12345678', 'spangsbjerg kirkevej 103');
 ";
    
    public static string NoResponseMessage = $@"
ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨
It looks like you failed to get a response from the API.
Are you 100% sure the API is already running on localhost port 5000?
Below is the inner exception.
Best regards, Alex
ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨ðŸ§¨
";
}